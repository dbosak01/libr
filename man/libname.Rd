% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/libname.R
\name{libname}
\alias{libname}
\title{Create a data library}
\usage{
libname(
  name,
  directory_path,
  engine = "rds",
  read_only = FALSE,
  env = parent.frame(),
  import_specs = NULL
)
}
\arguments{
\item{name}{The unquoted name of the library to create.  This name will 
be created as a variable in the global environment.}

\item{directory_path}{A directory path in which the data resides.  The 
incoming 
data can be in any file format: rds, csv, sas7bdat, etc.  The 
\code{libname} function will read any type of data into the library, 
and render as an R data frame.}

\item{engine}{The engine to use to create the library.  The engine typically 
corresponds to the file extension of the input files. The
default value is 'rds'.
Valid values are 'rds', 'sas7bdat', 'xpt', 'xls', 'xlsx', 'dbf', and 'csv'. 
When saved with \code{lib_write}, each file will be saved in its original
file format, unless otherwise specified on the \code{engine} parameter of 
\code{lib_write}.}

\item{read_only}{Whether the library should be created as read only.
Default is FALSE.  If TRUE, the user will be restricted from
appending, removing, or writing data from the library to the file system.}

\item{env}{The environment to use for the libname if it is loaded. 
Default is parent.frame().}

\item{import_specs}{A collection of import specifications to be used for import.
The items on the list should be named according to the file names in 
the library directory. This parameter is available for files of type
'csv', 'xlsx', and 'xls'.  See the \code{\link{specs}} function for addtional
information.}
}
\value{
The library object.
}
\description{
A data library is a collection of data objects. The purpose of 
the library is to combine related data sets, and allow you to manipulate all
of them as a single object. With a \code{libname} function, you can 
load an entire directory of data into memory in one step.  The package
contains additional functions to add and remove data from the library, 
copy the library, and write any changed data to the file system.
}
\details{
A libname is able to import files of several types.  The available types 
are as follows:  'rds', 'csv', 'xlsx', 'xls', 'sas7bdat', 'xpt', and 'dbf'.
To create a library of a particular type, set the \code{engine} parameter
to one of the available file extensions above.

With the \code{libname} function, the import details have been largely 
hidden from you.  The purpose of the function is to make it easy to 
import a set of related data files.  The function assumes that the 
data has file extensions that match the file type, and then makes further
assumptions based on each file type.  As a result, there are very few 
import options on the \code{libname} function.  If these assumptions 
do not apply, it is recommended that you import your data using a 
package that gives you more control over the import.  

One area the \strong{libr} package does give you control is the column
data types.
In most cases, it is not necessary to specify the data types for incoming
columns in your data.  Either the file format will preserve the appropriate
data type information, or the engine will guess correctly.  

However, in some cases it will be necessary to control the column data types.
For these cases, use the  
\code{import_specs} parameter.  The \code{import_specs} parameter allows you
to specify the data types by data set and column name. All the data type
specifications are contained within a \code{specs} collection, and the 
specifications for a particular data set are defined by an 
\code{import_spec} function. See the \code{\link{specs}} and 
\code{\link{import_spec}} documentation for further information
and examples of defining an import spec.
}
\examples{
# Create temp directory
tmp <- tempdir()

# Save some data to temp directory
# for illustration purposes
saveRDS(trees, file.path(tmp, "trees.rds"))
saveRDS(rock, file.path(tmp, "rocks.rds"))
saveRDS(beaver1, file.path(tmp, "beaver1.rds"))

# Create data library
libname(dat, tmp)

# Print dictionary for library
dictionary(dat)

# Load library into workspace 
lib_load(dat)

# Print summaries for each data frame
summary(dat.rocks)
summary(dat.trees)
summary(dat.beaver1)

#Unload from workspace
lib_unload(dat)

# Clean up
lib_delete(dat)
}
\seealso{
\code{\link{spec}} to define import specifications for a library, 
and \code{\link{dictionary}} to view the data dictionary.

Other lib: 
\code{\link{is.lib}()},
\code{\link{lib_add}()},
\code{\link{lib_copy}()},
\code{\link{lib_delete}()},
\code{\link{lib_info}()},
\code{\link{lib_load}()},
\code{\link{lib_path}()},
\code{\link{lib_remove}()},
\code{\link{lib_replace}()},
\code{\link{lib_size}()},
\code{\link{lib_unload}()},
\code{\link{lib_write}()},
\code{\link{print.lib}()}
}
\concept{lib}
