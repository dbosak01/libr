% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/libname.R
\name{libname}
\alias{libname}
\title{Create a data library}
\usage{
libname(
  name,
  directory_path,
  engine = "rds",
  read_only = FALSE,
  env = parent.frame(),
  import_specs = NULL
)
}
\arguments{
\item{name}{The unquoted name of the library to create.  This name will 
be created as a variable in the global environment.}

\item{directory_path}{A directory path in which the data resides.  The 
incoming 
data can be in any file format: rds, csv, sas7bdat, etc.  The 
\code{libname} function will read any type of data into the library, 
and render as an R data frame.}

\item{engine}{The engine to use to create the library.  The engine typically 
corresponds to the file extension of the input files. The
default value is 'rds'.
Valid values are 'rds', 'sas7bdat', 'xpt', 'xls', 'xlsx', 'dbf', and 'csv'. 
When saved with \code{lib_write}, each file will be saved in its original
file format, unless otherwise specified on the \code{engine} parameter of 
\code{lib_write}.}

\item{read_only}{Whether the library should be created as read only.
Default is FALSE.  If TRUE, the user will be restricted from
appending, removing, or writing data from the library to the file system.}

\item{env}{The environment to use for the libname if it is loaded. 
Default is parent.frame().}

\item{import_specs}{A collection of import specifications to be used for import.
The items on the list should be named according to the file names in 
the library directory. This parameter is available for files of type
'csv', 'xlsx', and 'xls'.  See the \code{\link{specs}} function for addtional
information.}
}
\value{
The library object.
}
\description{
A data library is a collection of data frames. The purpose of 
the library is to combine related data frames, and allow you to manipulate all
of them as a single object. A data library is an S3 object of class "lib".
}
\details{
A libname is able to import files of several types.  The available types 
are as follows:  'rds', 'csv', 'xlsx', 'xls', 'sas7bdat', 'xpt', and 'dbf'.
To create a library of a particular type, set the \code{engine} parameter
to one of the available file types above.

Some file types retain column data types as part of the file format.  Others
do not.  For instance, 'csv' file format does not contain type 
information.  Also 'xlsx' and 'xls' file formats.  For these file formats, 
the corresponding import engines will make a best guess of the column
data type based on the data in that column.  

In some cases, you may want
to override the best guess and specify some or all of the column data types 
directly.  You can provide the column data types specs using
the \code{import_specs} parameter on the \code{libname} function.  This 
parameter accepts a \code{\link{specs}} object that contains import
specifications for one or more of the input data files.  For each data file,
you may then define an \code{\link{import_spec}} object which specifies
the data types for the columns.  See the \code{\link{specs}} and 
\code{\link{import_spec}} object documentation for further information
and examples of defining an import spec.
}
\examples{
# Create temp directory
tmp <- tempdir()

# Save some data to temp directory
# for illustration purposes
saveRDS(trees, file.path(tmp, "trees.rds"))
saveRDS(rock, file.path(tmp, "rocks.rds"))
saveRDS(beaver1, file.path(tmp, "beaver1.rds"))

# Create data library
libname(dat, tmp)

# Print dictionary for library
dictionary(dat)

# Load library into workspace 
lib_load(dat)

# Print summaries for each data frame
summary(dat.rocks)
summary(dat.trees)
summary(dat.beaver1)

#Unload from workspace
lib_unload(dat)

# Clean up
lib_delete(dat)
}
\seealso{
\code{\link{spec}} to define import specifications for a library, 
and \code{\link{dictionary}} to view the data dictionary.

Other lib: 
\code{\link{is.lib}()},
\code{\link{lib_add}()},
\code{\link{lib_copy}()},
\code{\link{lib_delete}()},
\code{\link{lib_info}()},
\code{\link{lib_load}()},
\code{\link{lib_path}()},
\code{\link{lib_remove}()},
\code{\link{lib_replace}()},
\code{\link{lib_size}()},
\code{\link{lib_unload}()},
\code{\link{lib_write}()},
\code{\link{print.lib}()}
}
\concept{lib}
